"use strict";(self.webpackChunkplaybook_website=self.webpackChunkplaybook_website||[]).push([[2385],{3905:function(e,a,n){n.d(a,{Zo:function(){return p},kt:function(){return m}});var t=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)n=l[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=t.createContext({}),c=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},p=function(e){var a=c(e.components);return t.createElement(s.Provider,{value:a},e.children)},d={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?t.createElement(f,i(i({ref:a},p),{},{components:n})):t.createElement(f,i({ref:a},p))}));function m(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=u;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3010:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var t=n(7462),r=n(3366),l=(n(7294),n(3905)),i=["components"],o={sidebar_position:3},s="Executando seu pipeline",c={unversionedId:"guide-develop/running-wdl",id:"guide-develop/running-wdl",isDocsHomePage:!1,title:"Executando seu pipeline",description:"A constru\xe7\xe3o de um pipeline pode seguir seguindo nosso template para constru\xe7\xe3o de pipelines em https//github.com/Varstation/pipeline-template).  Nele adicionamos todos os arquivos auxiliares para executar seu pipeline.",source:"@site/docs/guide-develop/running-wdl.md",sourceDirName:"guide-develop",slug:"/guide-develop/running-wdl",permalink:"/bioinfo-playbook/docs/guide-develop/running-wdl",editUrl:"https://github.com/varstation/bioinfo-playbook/edit/master/website/docs/guide-develop/running-wdl.md",version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Construindo seu primeiro pipeline",permalink:"/bioinfo-playbook/docs/guide-develop/writing-wdl"},next:{title:"Verificando os resultados",permalink:"/bioinfo-playbook/docs/guide-develop/results-wdl"}},p=[{value:"Validando seu pipeline",id:"validando-seu-pipeline",children:[]},{value:"Construindo o seu inputs.json",id:"construindo-o-seu-inputsjson",children:[{value:"Exemplo de um inputs.json v\xe1lido:",id:"exemplo-de-um-inputsjson-v\xe1lido",children:[]}]},{value:"Executando seu pipeline localmente",id:"executando-seu-pipeline-localmente",children:[]}],d={toc:p};function u(e){var a=e.components,o=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,t.Z)({},d,o,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"executando-seu-pipeline"},"Executando seu pipeline"),(0,l.kt)("p",null,"A constru\xe7\xe3o de um pipeline pode seguir seguindo nosso template para constru\xe7\xe3o de pipelines em ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Varstation/pipeline-template(https://github.com/Varstation/pipeline-template)"},"https://github.com/Varstation/pipeline-template(https://github.com/Varstation/pipeline-template)"),".  Nele adicionamos todos os arquivos auxiliares para executar seu pipeline."),(0,l.kt)("h2",{id:"validando-seu-pipeline"},"Validando seu pipeline"),(0,l.kt)("p",null,"\xc9 uma boa pr\xe1tica validar todo os arquivos WDL antes de execut\xe1-lo. Esta etapa pode ser essencial para capturar quaisquer erros de sintaxe antes de execut\xe1-lo."),(0,l.kt)("p",null,"Utilizamos as ferramentas ",(0,l.kt)("a",{parentName:"p",href:"https://cromwell.readthedocs.io/en/stable/WOMtool/"},"Womtool")," e ",(0,l.kt)("a",{parentName:"p",href:"https://miniwdl.readthedocs.io/en/latest/"},"Miniwdl")," que verificam a estrutura e sintaxe de cada arquivo WDL. Abaixo um exemplo de snippet em bash para verifica\xe7\xe3o automatizada em seu diret\xf3rio para todos os arquivos indexados pelo git."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'#!/usr/bin/env bash\n\n# Validate every WDL file in the repository with womtool validate and miniwdl\n# check.\nset -e\nfor WDL_FILE in $(git ls-files *.wdl)\n  do\n    echo $WDL_FILE\n    womtool validate $WDL_FILE\n    miniwdl check $WDL_FILE\n    grep Copyright $WDL_FILE || bash -c "echo No copyright header in $WDL_FILE && exit 1"\n  done\n')),(0,l.kt)("p",null,"Se voc\xea estiver usando o nosso reposit\xf3rio de template basta executar o seguinte comando:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"$ bash tools/lint.sh\n")),(0,l.kt)("p",null,"O output exibir\xe1 todo o log das verifica\xe7\xf5es pelas respectivas ferramentas."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"Success!\nalignment.wdl\n    task BwaMem\n* Hint: install shellcheck (www.shellcheck.net) to check task commands. (--no-shellcheck suppresses this message)\n# Copyright (c) 2021 Varsomics & Hospital Israelita Albert Einstein\ngermline-varcall-dna.wdl\nSuccess!\ngermline-varcall-dna.wdl\n    workflow GermlineVarcallDna\n        call validate.ValidateInputs\n        if\n            call merge.Merge\n            call alignment.BwaMem\n            call varcall.FreeBayes\n    alignment : alignment.wdl\n        task BwaMem\n    merge : merge.wdl\n        task Merge\n    structs : structs.wdl\n    validate : validate-inputs.wdl\n        workflow ValidateInputs\n            if\n                scatter pair\n                    call fastq.ValidateFastq as ValidatePaired\n            if\n                scatter fastq1\n                    call fastq.ValidateFastq as ValidateSingle\n            if\n                scatter bam\n                    call sam.ValidateSam as ValidateUnmapped\n            if\n                call sam.ValidateSam as ValidateAligned\n        fastq : validate-fastq.wdl\n            task ValidateFastq\n        sam : validate-sam.wdl\n            task ValidateSam\n    varcall : varcall.wdl\n        task FreeBayes\n* Hint: install shellcheck (www.shellcheck.net) to check task commands. (--no-shellcheck suppresses this message)\n# Copyright (c) 2021 Varsomics & Hospital Israelita Albert Einstein\nmerge.wdl\nSuccess!\nmerge.wdl\n    task Merge\n* Hint: install shellcheck (www.shellcheck.net) to check task commands. (--no-shellcheck suppresses this message)\n# Copyright (c) 2021 Varsomics & Hospital Israelita Albert Einstein\nvarcall.wdl\nSuccess!\nvarcall.wdl\n    task FreeBayes\n* Hint: install shellcheck (www.shellcheck.net) to check task commands. (--no-shellcheck suppresses this message)\n# Copyright (c) 2021 Varsomics & Hospital Israelita Albert Einstein\n")),(0,l.kt)("h2",{id:"construindo-o-seu-inputsjson"},"Construindo o seu inputs.json"),(0,l.kt)("p",null,"O pr\xf3ximo passo \xe9 construir o arquivo de entradas. O arquivo deve ser em formato JSON. Um atalho para criar o esqueleto b\xe1sico \xe9 utilizar a ferramenta WdlTool que permite a partir de um workflow WDL gerar automaticamente o esqueleto de entradas exigidas em JSON."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"java -jar wdltool.jar inputs germline-dna-pipeline.wdl > inputs.json\n")),(0,l.kt)("p",null,"Agora com o arquivo de entradas gerado ",(0,l.kt)("inlineCode",{parentName:"p"},"inputs.json"),", voc\xea pode abrir com seu editor favorito e ir alterando para cada entrada os par\xe2metros necess\xe1rios para as tasks dos seu pipeline. Exemplo a seguir:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'"workflow.task.variable" : "Type"\n')),(0,l.kt)("p",null,"Substitua o valor de ",(0,l.kt)("inlineCode",{parentName:"p"},"Type")," pelo respectivo valor desejado. No JSON completo abaixo, por exemplo  considerando a vari\xe1vel reference, substitu\xedmos com o caminho do arquivo fasta de genoma de refer\xeancia."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'    "GermlineVarcallDna.reference": "tests/data/reference/bwa/reference_example.fasta",\n')),(0,l.kt)("h3",{id:"exemplo-de-um-inputsjson-v\xe1lido"},"Exemplo de um inputs.json v\xe1lido:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "GermlineVarcallDna.sampleInputs": {\n      "sampleName": "SAMPLE",\n      "sampleId": 0,\n      "fastqs1": [\n        "tests/data/SAMPLE_S8_L001_R1_001.fastq.gz"\n      ],\n      "fastqs2": [\n        "tests/data/SAMPLE_S8_L001_R2_001.fastq.gz"\n      ]\n\n    },\n    "GermlineVarcallDna.bwaIndex":{\n      "fastaFile": "tests/data/reference/bwa/reference_example.fasta",\n      "indexFiles":[\n        "tests/data/reference/bwa/reference_example.fasta.amb",\n        "tests/data/reference/bwa/reference_example.fasta.ann",\n        "tests/data/reference/bwa/reference_example.fasta.bwt",\n        "tests/data/reference/bwa/reference_example.fasta.pac",\n        "tests/data/reference/bwa/reference_example.fasta.sa"\n      ]\n    },\n    "GermlineVarcallDna.bwaThreads": 1,\n    "GermlineVarcallDna.reference": "tests/data/reference/bwa/reference_example.fasta",\n    "GermlineVarcallDna.reference_idx": "tests/data/reference/bwa/reference_example.fasta.fai",\n    "GermlineVarcallDna.intervals": "tests/data/BRCA.list"\n  }\n')),(0,l.kt)("h2",{id:"executando-seu-pipeline-localmente"},"Executando seu pipeline localmente"),(0,l.kt)("p",null,"Tendo os arquivos inputs devidamente formatados e seu wdl pronto, voc\xea est\xe1 pronto para executar seu pipeline localmente. Para executar o mesmo, utilizamos o orquestrador cromwell com o comando abaixo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"java -jar cromwell.jar run germline-dna-pipeline.wdl -i inputs.json\n")),(0,l.kt)("p",null,"Logo que conclu\xeddo com sucesso, o seu terminal dever\xe1 reproduzir esta linha abaixo, isto significa que seu pipeline foi executado com sucesso."),(0,l.kt)("p",null,(0,l.kt)("img",{src:n(1481).Z})),(0,l.kt)("p",null,"Seu terminal tamb\xe9m dever\xe1 informar o local do arquivo de sa\xedda VCF, deve ser algo similar a este:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'\n{\n  "outputs": {\n    "GermlineVarcallDna.fastqs2": ["tests/data/SAMPLE_S8_L001_R2_001.fastq.gz"],\n    "GermlineVarcallDna.outputPrefix": "SAMPLE_S8",\n    "GermlineVarcallDna.ValidateInputs.unmappedLogs": null,\n    "GermlineVarcallDna.Merge.trimmedReadsFwd": "/Users/marcelcaraciolo/Projects/gnmk/bioinfo/wdl-demo-pipeline/cromwell-executions/GermlineVarcallDna/c9b9f680-ab5a-41ca-aa5c-9a3dbe2b6f50/call-Merge/execution/SAMPLE_S8.merged_R1.fastq.gz",\n    "GermlineVarcallDna.ValidateInputs.validated": true,\n    "GermlineVarcallDna.BwaMem.outputBam": "/Users/marcelcaraciolo/Projects/gnmk/bioinfo/wdl-demo-pipeline/cromwell-executions/GermlineVarcallDna/c9b9f680-ab5a-41ca-aa5c-9a3dbe2b6f50/call-BwaMem/execution/SAMPLE_S8.aln.bam",\n    "GermlineVarcallDna.ValidateInputs.alignedLog": null,\n    "GermlineVarcallDna.BwaMem.outputBai": "/Users/marcelcaraciolo/Projects/gnmk/bioinfo/wdl-demo-pipeline/cromwell-executions/GermlineVarcallDna/c9b9f680-ab5a-41ca-aa5c-9a3dbe2b6f50/call-BwaMem/execution/SAMPLE_S8.aln.bam.bai",\n    "GermlineVarcallDna.Merge.trimmedReadsRev": "/Users/marcelcaraciolo/Projects/gnmk/bioinfo/wdl-demo-pipeline/cromwell-executions/GermlineVarcallDna/c9b9f680-ab5a-41ca-aa5c-9a3dbe2b6f50/call-Merge/execution/SAMPLE_S8.merged_R2.fastq.gz",\n    "GermlineVarcallDna.FreeBayes.vcf_file": "/Users/marcelcaraciolo/Projects/gnmk/bioinfo/wdl-demo-pipeline/cromwell-executions/GermlineVarcallDna/c9b9f680-ab5a-41ca-aa5c-9a3dbe2b6f50/call-FreeBayes/execution/SAMPLE_S8.freebayes.vcf",\n    "GermlineVarcallDna.ValidateInputs.fastqLogs": ["/Users/marcelcaraciolo/Projects/gnmk/bioinfo/wdl-demo-pipeline/cromwell-executions/GermlineVarcallDna/c9b9f680-ab5a-41ca-aa5c-9a3dbe2b6f50/call-ValidateInputs/ValidateInputs/e84fd08d-35f5-4fa1-a326-fa3d9717c64d/call-ValidatePaired/shard-0/execution/SAMPLE.SAMPLE_S8_L001_R1_001.fastq.gz.validation.log"],\n    "GermlineVarcallDna.fastqs1": ["tests/data/SAMPLE_S8_L001_R1_001.fastq.gz"]\n  },\n  "id": "c9b9f680-ab5a-41ca-aa5c-9a3dbe2b6f50"\n}\n\n')),(0,l.kt)("p",null,"O arquivo que estamos interessados \xe9 o ",(0,l.kt)("inlineCode",{parentName:"p"},"GermlineVarcallDna.FreeBayes.vcf_file"),".  Vamos explorar ele em nossa pr\xf3xima se\xe7\xe3o."))}u.isMDXComponent=!0},1481:function(e,a,n){a.Z=n.p+"assets/images/terminal-cromwell-d76a0957b8145cff40212d4857b7bb41.png"}}]);