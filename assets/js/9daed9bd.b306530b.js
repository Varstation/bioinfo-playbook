"use strict";(self.webpackChunkplaybook_website=self.webpackChunkplaybook_website||[]).push([[136],{3905:function(e,t,o){o.d(t,{Zo:function(){return d},kt:function(){return m}});var s=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,s)}return o}function n(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function i(e,t){if(null==e)return{};var o,s,r=function(e,t){if(null==e)return{};var o,s,r={},a=Object.keys(e);for(s=0;s<a.length;s++)o=a[s],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)o=a[s],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var u=s.createContext({}),c=function(e){var t=s.useContext(u),o=t;return e&&(o="function"==typeof e?e(t):n(n({},t),e)),o},d=function(e){var t=c(e.components);return s.createElement(u.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},p=s.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(o),m=r,f=p["".concat(u,".").concat(m)]||p[m]||l[m]||a;return o?s.createElement(f,n(n({ref:t},d),{},{components:o})):s.createElement(f,n({ref:t},d))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,n=new Array(a);n[0]=p;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,n[1]=i;for(var c=2;c<a;c++)n[c]=o[c];return s.createElement.apply(null,n)}return s.createElement.apply(null,o)}p.displayName="MDXCreateElement"},4120:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return i},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return d},default:function(){return p}});var s=o(7462),r=o(3366),a=(o(7294),o(3905)),n=["components"],i={sidebar_position:6},u="Testes Autom\xe1ticos",c={unversionedId:"guide-best-practices/tests",id:"guide-best-practices/tests",isDocsHomePage:!1,title:"Testes Autom\xe1ticos",description:"\xc9 recomendado que todos os pipelines de bioinform\xe1tica do grupo Varstation tenham testes autom\xe1ticos com o objetivo de garantir a consist\xeancia e corretude durante novas atualiza\xe7\xf5es. Os testes s\xe3o implementados usando o framework pytest-workflow.",source:"@site/docs/guide-best-practices/tests.md",sourceDirName:"guide-best-practices",slug:"/guide-best-practices/tests",permalink:"/bioinfo-playbook/docs/guide-best-practices/tests",editUrl:"https://github.com/varstation/bioinfo-playbook/edit/master/website/docs/guide-best-practices/tests.md",version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Guia de Estilo",permalink:"/bioinfo-playbook/docs/guide-best-practices/style"}},d=[{value:"Estrutura de arquivos de teste",id:"estrutura-de-arquivos-de-teste",children:[]},{value:"Arquivos de dados",id:"arquivos-de-dados",children:[]},{value:"Testes funcionais",id:"testes-funcionais",children:[]},{value:"Testes de integra\xe7\xe3o",id:"testes-de-integra\xe7\xe3o",children:[]},{value:"Arquivos de integra\xe7\xe3o cont\xednua (configura\xe7\xe3o)",id:"arquivos-de-integra\xe7\xe3o-cont\xednua-configura\xe7\xe3o",children:[]}],l={toc:d};function p(e){var t=e.components,o=(0,r.Z)(e,n);return(0,a.kt)("wrapper",(0,s.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testes-autom\xe1ticos"},"Testes Autom\xe1ticos"),(0,a.kt)("p",null,"\xc9 recomendado que todos os pipelines de bioinform\xe1tica do grupo Varstation tenham testes autom\xe1ticos com o objetivo de garantir a consist\xeancia e corretude durante novas atualiza\xe7\xf5es. Os testes s\xe3o implementados usando o framework ",(0,a.kt)("a",{parentName:"p",href:"https://pytest-workflow.readthedocs.io/en/stable/"},"pytest-workflow"),"."),(0,a.kt)("p",null,"Todos os testes definidos na configura\xe7\xe3o do pytest-workflow devem ter as tags  ",(0,a.kt)("inlineCode",{parentName:"p"},"integration"),"  ou ",(0,a.kt)("inlineCode",{parentName:"p"},"functional")," para indicar quand os testes devem ser executados em todos os PRs ou arbitrariamente."),(0,a.kt)("h2",{id:"estrutura-de-arquivos-de-teste"},"Estrutura de arquivos de teste"),(0,a.kt)("p",null,'Dentro do reposit\xf3rio do pipeline, cont\xe9m uma pasta "teste" .  Esta pasta contem todos os arquivos de teste, incluindo arquivos de entrada JSON, os arquivos de configura\xe7\xe3o YAML, os arquivos de dados obrigat\xf3rios e arquivos de configura\xe7\xe3o cromwell.'),(0,a.kt)("p",null,"A maior parte destes diret\xf3rios e arquivos s\xe3o opcionais."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 cromwell_config\n\u2502   \u2514\u2500\u2500 docker.conf\n\u251c\u2500\u2500 cromwell_options.json\n\u251c\u2500\u2500 data\n\u2502   \u2514\u2500\u2500 <test data>\n\u251c\u2500\u2500 functional\n\u2502   \u2514\u2500\u2500 <input JSON files for any potential functional (large data) tests>\n\u251c\u2500\u2500 integration\n\u2502   \u2514\u2500\u2500 <input JSON files for any potential integration (small data) tests>\n\u251c\u2500\u2500 samplesheets\n\u2502   \u2514\u2500\u2500 <sample sheets for the test samples>\n\u251c\u2500\u2500 <custom pytest scripts for more complex testing>\n\u2514\u2500\u2500 <pytest-workflow YAML files>\n")),(0,a.kt)("h2",{id:"arquivos-de-dados"},"Arquivos de dados"),(0,a.kt)("p",null,"Os arquivos de dados podem ser quaisquer arquivos desde VCF a arquivos de genoma de refer\xeancia FASTA. Estes arquivos s\xe3o referenciados nos arquivos de entrada JSON ou em samplesheets. Importante lembrar que os arquivos devem estar com os paths\nrelativos para que possam ser usados para testes em sistemas."),(0,a.kt)("p",null,"Preferencialmente estes arquivos devem ser pequenos (< 1MB), para n\xe3o tornar as opera\xe7\xf5es de download mais lentas."),(0,a.kt)("h2",{id:"testes-funcionais"},"Testes funcionais"),(0,a.kt)("p",null,"Os testes funcionais significam os testes com dados de maior escala. Estes arquivos geralmente n\xe3o devem estar dentro do reposit\xf3rio e sim armazenado em buckets AWS ou storages externos. Estes testes s\xe3o geralmente executados em nossos clusters na AWS ou localmente de forma arbirtr\xe1ria."),(0,a.kt)("h2",{id:"testes-de-integra\xe7\xe3o"},"Testes de integra\xe7\xe3o"),(0,a.kt)("p",null,"Estes testes devem ser executados para todo PR que \xe9 realizado. Estes devem usar apenas pequenas amostras de dados que s\xe3o inclusas no reposit\xf3rio."),(0,a.kt)("h2",{id:"arquivos-de-integra\xe7\xe3o-cont\xednua-configura\xe7\xe3o"},"Arquivos de integra\xe7\xe3o cont\xednua (configura\xe7\xe3o)"),(0,a.kt)("p",null,"Para executar os testes em nossos ambientes de CI , utilizamos o ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/features/actions"},"Github Actions"),"."),(0,a.kt)("p",null,"Exemplos podem ser encontrados em nosso reposit\xf3rio:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Varstation/pipeline-template/blob/main/.github/workflows/ci.yml"},"ci")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Varstation/pipeline-template/blob/main/.github/workflows/publish.yml"},"publish.yml"))))}p.isMDXComponent=!0}}]);