"use strict";(self.webpackChunkplaybook_website=self.webpackChunkplaybook_website||[]).push([[7812],{3905:function(e,o,t){t.d(o,{Zo:function(){return u},kt:function(){return c}});var a=t(7294);function n(e,o,t){return o in e?Object.defineProperty(e,o,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[o]=t,e}function r(e,o){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);o&&(a=a.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var o=1;o<arguments.length;o++){var t=null!=arguments[o]?arguments[o]:{};o%2?r(Object(t),!0).forEach((function(o){n(e,o,t[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(t,o))}))}return e}function s(e,o){if(null==e)return{};var t,a,n=function(e,o){if(null==e)return{};var t,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],o.indexOf(t)>=0||(n[t]=e[t]);return n}(e,o);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],o.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),d=function(e){var o=a.useContext(l),t=o;return e&&(t="function"==typeof e?e(o):i(i({},o),e)),t},u=function(e){var o=d(e.components);return a.createElement(l.Provider,{value:o},e.children)},m={inlineCode:"code",wrapper:function(e){var o=e.children;return a.createElement(a.Fragment,{},o)}},p=a.forwardRef((function(e,o){var t=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=d(t),c=n,f=p["".concat(l,".").concat(c)]||p[c]||m[c]||r;return t?a.createElement(f,i(i({ref:o},u),{},{components:t})):a.createElement(f,i({ref:o},u))}));function c(e,o){var t=arguments,n=o&&o.mdxType;if("string"==typeof e||n){var r=t.length,i=new Array(r);i[0]=p;var s={};for(var l in o)hasOwnProperty.call(o,l)&&(s[l]=o[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var d=2;d<r;d++)i[d]=t[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},1530:function(e,o,t){t.r(o),t.d(o,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return u},default:function(){return p}});var a=t(7462),n=t(3366),r=(t(7294),t(3905)),i=["components"],s={sidebar_position:5},l="Homologacao e monitoramento de testes do pipeline",d={unversionedId:"guide-best-practices/homologation",id:"guide-best-practices/homologation",isDocsHomePage:!1,title:"Homologacao e monitoramento de testes do pipeline",description:"O pipeline de bioinform\xe1tica precisa ser avaliado clinicamente antes de lan\xe7ado oficialmente em produ\xe7\xe3o. Uma das etapas exigidas \xe9 a sele\xe7\xe3o de amostras com resultados pr\xe9vios e a valida\xe7\xe3o de outputs de sa\xedda. Utilizamos um continuous integration (CI) para automa\xe7\xe3o da execu\xe7\xe3o da su\xedte de testes do pipeline. Utilizamos como ferramenta base o pytest-worfklow, que permite o teste automatizado perante a ferramenta de orquestramento de workflows Cromwell e a valida\xe7\xe3o dos arquivos de sa\xedda perante um arquivo de configura\xe7\xe3o de testes que informam os inputs, os wdls e os arquivos esperados.",source:"@site/docs/guide-best-practices/homologation.md",sourceDirName:"guide-best-practices",slug:"/guide-best-practices/homologation",permalink:"/bioinfo-playbook/docs/guide-best-practices/homologation",editUrl:"https://github.com/varstation/bioinfo-playbook/edit/master/website/docs/guide-best-practices/homologation.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Desenvolvimento do Pipeline",permalink:"/bioinfo-playbook/docs/guide-best-practices/development"},next:{title:"Criando a primeira release do pipeline",permalink:"/bioinfo-playbook/docs/guide-best-practices/release"}},u=[{value:"Construindo seu workflow de testes",id:"construindo-seu-workflow-de-testes",children:[]}],m={toc:u};function p(e){var o=e.components,s=(0,n.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},m,s,{components:o,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"homologacao-e-monitoramento-de-testes-do-pipeline"},"Homologacao e monitoramento de testes do pipeline"),(0,r.kt)("p",null,"O pipeline de bioinform\xe1tica precisa ser avaliado clinicamente antes de lan\xe7ado oficialmente em produ\xe7\xe3o. Uma das etapas exigidas \xe9 a sele\xe7\xe3o de amostras com resultados pr\xe9vios e a valida\xe7\xe3o de outputs de sa\xedda. Utilizamos um continuous integration (CI) para automa\xe7\xe3o da execu\xe7\xe3o da su\xedte de testes do pipeline. Utilizamos como ferramenta base o ",(0,r.kt)("a",{parentName:"p",href:"https://pytest-workflow.readthedocs.io/en/stable/"},"pytest-worfklow"),", que permite o teste automatizado perante a ferramenta de orquestramento de workflows ",(0,r.kt)("a",{parentName:"p",href:"https://cromwell.readthedocs.io/en/stable/"},"Cromwell")," e a valida\xe7\xe3o dos arquivos de sa\xedda perante um arquivo de configura\xe7\xe3o de testes que informam os inputs, os wdls e os arquivos esperados."),(0,r.kt)("p",null,"Abaixo um exemplo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'- name: My pipeline\n  command: cromwell run -i inputs.json -o options.json moo.wdl\n  files:\n    - path: test-output/moo.txt.gz\n      md5sum: 173fd8023240a8016033b33f42db14a2\n  stdout:\n    contains:\n      - "WorkflowSucceededState"\n')),(0,r.kt)("p",null,"No exemplo a seguir validamos a partir de um pipeline de bioinform\xe1tica Germinativo de exemplo, se os arquivos esperados foram criados e se o conte\xfado do arquivo VCF cont\xe9m os dados esperados. No nosso exemplo queremos que ele contenha apenas variantes no cromossomo 13 e 17, uma variante pr\xe9via na coordenada 32915410 com altera\xe7\xe3o de DNA na sequ\xeancia CAATTA para CA . Por fim, definimos tamb\xe9m que ele n\xe3o deve conter variantes em cromossomos de 1 a 9 , j\xe1 que limitamos a chamada em regi\xf5es espec\xedficas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"- name: Germline\n  tags:\n    - integration\n    - germline\n  command: >-\n    cromwell run -o tests/cromwell_options.json\n    -i tests/functional/inputs.json germline-varcall-dna.wdl\n  stdout:\n    contains:\n      - \"SingleWorkflowRunnerActor workflow finished with status 'Succeeded'.\"\n      - 'GermlineVarcallDna.ValidateInputs.validated\": true'\n  files:\n    - path: \"test-output/SAMPLE.SAMPLE_S8_L001_R1_001.fastq.gz.validation.log\"\n    - path: \"test-output/SAMPLE_S8.aln.bam\"\n    - path: \"test-output/SAMPLE_S8.freebayes.vcf\"\n      contains_regex:\n        - 'chr13\\t32915410\\t\\.\\tCAATTA\\tCA'\n        - 'chr13\\t'\n        - 'chr17\\t'\n      must_not_contain_regex:\n        - 'chr[1-9]\\t'  #only to check that the varcall does not have any regions besides the regions\n")),(0,r.kt)("p",null,"O CI segue o fluxo abaixo:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Instancia a m\xe1quina alvo de testes"),(0,r.kt)("li",{parentName:"ul"},"Realiza o checkout do reposit\xf3rio na branch develop e respectivos subm\xf3dulos se aplic\xe1vel;"),(0,r.kt)("li",{parentName:"ul"},"Realiza o setup do ambiente com instala\xe7\xe3o das ferramentas do anaconda e miniconda;"),(0,r.kt)("li",{parentName:"ul"},"Realiza a instala\xe7\xe3o do ambiente de homologa\xe7\xe3o e respectivas ferramentas de teste;"),(0,r.kt)("li",{parentName:"ul"},"Realiza o download a partir do AWS os arquivos de teste que incluem genomas de refer\xeancia, alinhamentos e arquivos auxiliares e armazena em tests/data"),(0,r.kt)("li",{parentName:"ul"},"Invoca o pytest-workflow em ambiente de homologa\xe7\xe3o executando o pipeline a partir do cromwell."),(0,r.kt)("li",{parentName:"ul"},"Cromwell retorna os arquivos de testes e os mesmos s\xe3o validados perante o arquivo de configura\xe7\xe3o dos testes"),(0,r.kt)("li",{parentName:"ul"},"Realizado com sucesso, deleta todos os arquivos tempor\xe1rios, de log e de sa\xedda"),(0,r.kt)("li",{parentName:"ul"},"Se realizado com erro, Valida\xe7\xe3o do arquivo log.out em busca de mensagens de erro e exibe no log do CI as mensagens de erro para auxiliar o desenvolvedor."),(0,r.kt)("li",{parentName:"ul"},"M\xe1quina alvo de destes \xe9 desligada e terminada"),(0,r.kt)("li",{parentName:"ul"},"Aviso ao github CI Actions (reposit\xf3rio) que o workflow foi executado com sucesso.")),(0,r.kt)("p",null,"Ilustramos alguns exemplos a seguir do log de um CI realizado por completo em nosso ambiente de homologa\xe7\xe3o:"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(7357).Z}),"\nFigura 17: Tela da documenta\xe7\xe3o do pipeline em WDL"),(0,r.kt)("h2",{id:"construindo-seu-workflow-de-testes"},"Construindo seu workflow de testes"),(0,r.kt)("p",null,"Todos os arquivos necess\xe1rios para construir seu primeiro workflow de testes se encontram ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Varstation/wdl-demo-pipeline/tree/main/tests"},"aqui"),". Este ",(0,r.kt)("a",{parentName:"p",href:"/bioinfo-playbook/docs/guide-best-practices/tests"},"guia")," j\xe1 te auxiliar\xe1 a montar de forma r\xe1pida uma primeira su\xedte de testes."),(0,r.kt)("p",null,"Na pr\xf3xima se\xe7\xe3o, iremos aprender a como construir nosso primeiro candidato a release oficial de produ\xe7\xe3o."))}p.isMDXComponent=!0},7357:function(e,o,t){o.Z=t.p+"assets/images/homolog-ci-0e3ef821e86dfaeb42a400f40a67f1ac.png"}}]);